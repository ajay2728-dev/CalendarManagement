/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thriftMeeting;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-17")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IMeetingService {

  public interface Iface {

    public boolean canScheduleMeeting(IMeetingServiceDTO meetingDTO) throws MissingFieldException, InvalidFieldException, NonUniqueFieldException, NotFoundException, ConstraintViolationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void canScheduleMeeting(IMeetingServiceDTO meetingDTO, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public boolean canScheduleMeeting(IMeetingServiceDTO meetingDTO) throws MissingFieldException, InvalidFieldException, NonUniqueFieldException, NotFoundException, ConstraintViolationException, org.apache.thrift.TException
    {
      send_canScheduleMeeting(meetingDTO);
      return recv_canScheduleMeeting();
    }

    public void send_canScheduleMeeting(IMeetingServiceDTO meetingDTO) throws org.apache.thrift.TException
    {
      canScheduleMeeting_args args = new canScheduleMeeting_args();
      args.setMeetingDTO(meetingDTO);
      sendBase("canScheduleMeeting", args);
    }

    public boolean recv_canScheduleMeeting() throws MissingFieldException, InvalidFieldException, NonUniqueFieldException, NotFoundException, ConstraintViolationException, org.apache.thrift.TException
    {
      canScheduleMeeting_result result = new canScheduleMeeting_result();
      receiveBase(result, "canScheduleMeeting");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      if (result.invalidEx != null) {
        throw result.invalidEx;
      }
      if (result.uniqueEx != null) {
        throw result.uniqueEx;
      }
      if (result.notFoundEx != null) {
        throw result.notFoundEx;
      }
      if (result.constraintEx != null) {
        throw result.constraintEx;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "canScheduleMeeting failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void canScheduleMeeting(IMeetingServiceDTO meetingDTO, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      canScheduleMeeting_call method_call = new canScheduleMeeting_call(meetingDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class canScheduleMeeting_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private IMeetingServiceDTO meetingDTO;
      public canScheduleMeeting_call(IMeetingServiceDTO meetingDTO, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingDTO = meetingDTO;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("canScheduleMeeting", org.apache.thrift.protocol.TMessageType.CALL, 0));
        canScheduleMeeting_args args = new canScheduleMeeting_args();
        args.setMeetingDTO(meetingDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws MissingFieldException, InvalidFieldException, NonUniqueFieldException, NotFoundException, ConstraintViolationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_canScheduleMeeting();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("canScheduleMeeting", new canScheduleMeeting());
      return processMap;
    }

    public static class canScheduleMeeting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, canScheduleMeeting_args, canScheduleMeeting_result> {
      public canScheduleMeeting() {
        super("canScheduleMeeting");
      }

      @Override
      public canScheduleMeeting_args getEmptyArgsInstance() {
        return new canScheduleMeeting_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public canScheduleMeeting_result getEmptyResultInstance() {
        return new canScheduleMeeting_result();
      }

      @Override
      public canScheduleMeeting_result getResult(I iface, canScheduleMeeting_args args) throws org.apache.thrift.TException {
        canScheduleMeeting_result result = getEmptyResultInstance();
        try {
          result.success = iface.canScheduleMeeting(args.meetingDTO);
          result.setSuccessIsSet(true);
        } catch (MissingFieldException ex) {
          result.ex = ex;
        } catch (InvalidFieldException invalidEx) {
          result.invalidEx = invalidEx;
        } catch (NonUniqueFieldException uniqueEx) {
          result.uniqueEx = uniqueEx;
        } catch (NotFoundException notFoundEx) {
          result.notFoundEx = notFoundEx;
        } catch (ConstraintViolationException constraintEx) {
          result.constraintEx = constraintEx;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("canScheduleMeeting", new canScheduleMeeting());
      return processMap;
    }

    public static class canScheduleMeeting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, canScheduleMeeting_args, java.lang.Boolean, canScheduleMeeting_result> {
      public canScheduleMeeting() {
        super("canScheduleMeeting");
      }

      @Override
      public canScheduleMeeting_result getEmptyResultInstance() {
        return new canScheduleMeeting_result();
      }

      @Override
      public canScheduleMeeting_args getEmptyArgsInstance() {
        return new canScheduleMeeting_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            canScheduleMeeting_result result = new canScheduleMeeting_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            canScheduleMeeting_result result = new canScheduleMeeting_result();
            if (e instanceof MissingFieldException) {
              result.ex = (MissingFieldException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof InvalidFieldException) {
              result.invalidEx = (InvalidFieldException) e;
              result.setInvalidExIsSet(true);
              msg = result;
            } else if (e instanceof NonUniqueFieldException) {
              result.uniqueEx = (NonUniqueFieldException) e;
              result.setUniqueExIsSet(true);
              msg = result;
            } else if (e instanceof NotFoundException) {
              result.notFoundEx = (NotFoundException) e;
              result.setNotFoundExIsSet(true);
              msg = result;
            } else if (e instanceof ConstraintViolationException) {
              result.constraintEx = (ConstraintViolationException) e;
              result.setConstraintExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, canScheduleMeeting_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.canScheduleMeeting(args.meetingDTO,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class canScheduleMeeting_args implements org.apache.thrift.TBase<canScheduleMeeting_args, canScheduleMeeting_args._Fields>, java.io.Serializable, Cloneable, Comparable<canScheduleMeeting_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canScheduleMeeting_args");

    private static final org.apache.thrift.protocol.TField MEETING_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingDTO", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canScheduleMeeting_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canScheduleMeeting_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable IMeetingServiceDTO meetingDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_DTO((short)-1, "meetingDTO");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // MEETING_DTO
            return MEETING_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_DTO, new org.apache.thrift.meta_data.FieldMetaData("meetingDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IMeetingServiceDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canScheduleMeeting_args.class, metaDataMap);
    }

    public canScheduleMeeting_args() {
    }

    public canScheduleMeeting_args(
      IMeetingServiceDTO meetingDTO)
    {
      this();
      this.meetingDTO = meetingDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canScheduleMeeting_args(canScheduleMeeting_args other) {
      if (other.isSetMeetingDTO()) {
        this.meetingDTO = new IMeetingServiceDTO(other.meetingDTO);
      }
    }

    @Override
    public canScheduleMeeting_args deepCopy() {
      return new canScheduleMeeting_args(this);
    }

    @Override
    public void clear() {
      this.meetingDTO = null;
    }

    @org.apache.thrift.annotation.Nullable
    public IMeetingServiceDTO getMeetingDTO() {
      return this.meetingDTO;
    }

    public canScheduleMeeting_args setMeetingDTO(@org.apache.thrift.annotation.Nullable IMeetingServiceDTO meetingDTO) {
      this.meetingDTO = meetingDTO;
      return this;
    }

    public void unsetMeetingDTO() {
      this.meetingDTO = null;
    }

    /** Returns true if field meetingDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingDTO() {
      return this.meetingDTO != null;
    }

    public void setMeetingDTOIsSet(boolean value) {
      if (!value) {
        this.meetingDTO = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MEETING_DTO:
        if (value == null) {
          unsetMeetingDTO();
        } else {
          setMeetingDTO((IMeetingServiceDTO)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_DTO:
        return getMeetingDTO();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MEETING_DTO:
        return isSetMeetingDTO();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof canScheduleMeeting_args)
        return this.equals((canScheduleMeeting_args)that);
      return false;
    }

    public boolean equals(canScheduleMeeting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_meetingDTO = true && this.isSetMeetingDTO();
      boolean that_present_meetingDTO = true && that.isSetMeetingDTO();
      if (this_present_meetingDTO || that_present_meetingDTO) {
        if (!(this_present_meetingDTO && that_present_meetingDTO))
          return false;
        if (!this.meetingDTO.equals(that.meetingDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMeetingDTO()) ? 131071 : 524287);
      if (isSetMeetingDTO())
        hashCode = hashCode * 8191 + meetingDTO.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canScheduleMeeting_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMeetingDTO(), other.isSetMeetingDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingDTO, other.meetingDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canScheduleMeeting_args(");
      boolean first = true;

      sb.append("meetingDTO:");
      if (this.meetingDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (meetingDTO != null) {
        meetingDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canScheduleMeeting_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_argsStandardScheme getScheme() {
        return new canScheduleMeeting_argsStandardScheme();
      }
    }

    private static class canScheduleMeeting_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<canScheduleMeeting_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // MEETING_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meetingDTO = new IMeetingServiceDTO();
                struct.meetingDTO.read(iprot);
                struct.setMeetingDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingDTO != null) {
          oprot.writeFieldBegin(MEETING_DTO_FIELD_DESC);
          struct.meetingDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canScheduleMeeting_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_argsTupleScheme getScheme() {
        return new canScheduleMeeting_argsTupleScheme();
      }
    }

    private static class canScheduleMeeting_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<canScheduleMeeting_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMeetingDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingDTO()) {
          struct.meetingDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingDTO = new IMeetingServiceDTO();
          struct.meetingDTO.read(iprot);
          struct.setMeetingDTOIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class canScheduleMeeting_result implements org.apache.thrift.TBase<canScheduleMeeting_result, canScheduleMeeting_result._Fields>, java.io.Serializable, Cloneable, Comparable<canScheduleMeeting_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("canScheduleMeeting_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INVALID_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidEx", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UNIQUE_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("uniqueEx", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("notFoundEx", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CONSTRAINT_EX_FIELD_DESC = new org.apache.thrift.protocol.TField("constraintEx", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new canScheduleMeeting_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new canScheduleMeeting_resultTupleSchemeFactory();

    public boolean success; // required
    public @org.apache.thrift.annotation.Nullable MissingFieldException ex; // required
    public @org.apache.thrift.annotation.Nullable InvalidFieldException invalidEx; // required
    public @org.apache.thrift.annotation.Nullable NonUniqueFieldException uniqueEx; // required
    public @org.apache.thrift.annotation.Nullable NotFoundException notFoundEx; // required
    public @org.apache.thrift.annotation.Nullable ConstraintViolationException constraintEx; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex"),
      INVALID_EX((short)2, "invalidEx"),
      UNIQUE_EX((short)3, "uniqueEx"),
      NOT_FOUND_EX((short)4, "notFoundEx"),
      CONSTRAINT_EX((short)5, "constraintEx");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          case 2: // INVALID_EX
            return INVALID_EX;
          case 3: // UNIQUE_EX
            return UNIQUE_EX;
          case 4: // NOT_FOUND_EX
            return NOT_FOUND_EX;
          case 5: // CONSTRAINT_EX
            return CONSTRAINT_EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MissingFieldException.class)));
      tmpMap.put(_Fields.INVALID_EX, new org.apache.thrift.meta_data.FieldMetaData("invalidEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidFieldException.class)));
      tmpMap.put(_Fields.UNIQUE_EX, new org.apache.thrift.meta_data.FieldMetaData("uniqueEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NonUniqueFieldException.class)));
      tmpMap.put(_Fields.NOT_FOUND_EX, new org.apache.thrift.meta_data.FieldMetaData("notFoundEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotFoundException.class)));
      tmpMap.put(_Fields.CONSTRAINT_EX, new org.apache.thrift.meta_data.FieldMetaData("constraintEx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConstraintViolationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(canScheduleMeeting_result.class, metaDataMap);
    }

    public canScheduleMeeting_result() {
    }

    public canScheduleMeeting_result(
      boolean success,
      MissingFieldException ex,
      InvalidFieldException invalidEx,
      NonUniqueFieldException uniqueEx,
      NotFoundException notFoundEx,
      ConstraintViolationException constraintEx)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
      this.invalidEx = invalidEx;
      this.uniqueEx = uniqueEx;
      this.notFoundEx = notFoundEx;
      this.constraintEx = constraintEx;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public canScheduleMeeting_result(canScheduleMeeting_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new MissingFieldException(other.ex);
      }
      if (other.isSetInvalidEx()) {
        this.invalidEx = new InvalidFieldException(other.invalidEx);
      }
      if (other.isSetUniqueEx()) {
        this.uniqueEx = new NonUniqueFieldException(other.uniqueEx);
      }
      if (other.isSetNotFoundEx()) {
        this.notFoundEx = new NotFoundException(other.notFoundEx);
      }
      if (other.isSetConstraintEx()) {
        this.constraintEx = new ConstraintViolationException(other.constraintEx);
      }
    }

    @Override
    public canScheduleMeeting_result deepCopy() {
      return new canScheduleMeeting_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
      this.invalidEx = null;
      this.uniqueEx = null;
      this.notFoundEx = null;
      this.constraintEx = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public canScheduleMeeting_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public MissingFieldException getEx() {
      return this.ex;
    }

    public canScheduleMeeting_result setEx(@org.apache.thrift.annotation.Nullable MissingFieldException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidFieldException getInvalidEx() {
      return this.invalidEx;
    }

    public canScheduleMeeting_result setInvalidEx(@org.apache.thrift.annotation.Nullable InvalidFieldException invalidEx) {
      this.invalidEx = invalidEx;
      return this;
    }

    public void unsetInvalidEx() {
      this.invalidEx = null;
    }

    /** Returns true if field invalidEx is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalidEx() {
      return this.invalidEx != null;
    }

    public void setInvalidExIsSet(boolean value) {
      if (!value) {
        this.invalidEx = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NonUniqueFieldException getUniqueEx() {
      return this.uniqueEx;
    }

    public canScheduleMeeting_result setUniqueEx(@org.apache.thrift.annotation.Nullable NonUniqueFieldException uniqueEx) {
      this.uniqueEx = uniqueEx;
      return this;
    }

    public void unsetUniqueEx() {
      this.uniqueEx = null;
    }

    /** Returns true if field uniqueEx is set (has been assigned a value) and false otherwise */
    public boolean isSetUniqueEx() {
      return this.uniqueEx != null;
    }

    public void setUniqueExIsSet(boolean value) {
      if (!value) {
        this.uniqueEx = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public NotFoundException getNotFoundEx() {
      return this.notFoundEx;
    }

    public canScheduleMeeting_result setNotFoundEx(@org.apache.thrift.annotation.Nullable NotFoundException notFoundEx) {
      this.notFoundEx = notFoundEx;
      return this;
    }

    public void unsetNotFoundEx() {
      this.notFoundEx = null;
    }

    /** Returns true if field notFoundEx is set (has been assigned a value) and false otherwise */
    public boolean isSetNotFoundEx() {
      return this.notFoundEx != null;
    }

    public void setNotFoundExIsSet(boolean value) {
      if (!value) {
        this.notFoundEx = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ConstraintViolationException getConstraintEx() {
      return this.constraintEx;
    }

    public canScheduleMeeting_result setConstraintEx(@org.apache.thrift.annotation.Nullable ConstraintViolationException constraintEx) {
      this.constraintEx = constraintEx;
      return this;
    }

    public void unsetConstraintEx() {
      this.constraintEx = null;
    }

    /** Returns true if field constraintEx is set (has been assigned a value) and false otherwise */
    public boolean isSetConstraintEx() {
      return this.constraintEx != null;
    }

    public void setConstraintExIsSet(boolean value) {
      if (!value) {
        this.constraintEx = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((MissingFieldException)value);
        }
        break;

      case INVALID_EX:
        if (value == null) {
          unsetInvalidEx();
        } else {
          setInvalidEx((InvalidFieldException)value);
        }
        break;

      case UNIQUE_EX:
        if (value == null) {
          unsetUniqueEx();
        } else {
          setUniqueEx((NonUniqueFieldException)value);
        }
        break;

      case NOT_FOUND_EX:
        if (value == null) {
          unsetNotFoundEx();
        } else {
          setNotFoundEx((NotFoundException)value);
        }
        break;

      case CONSTRAINT_EX:
        if (value == null) {
          unsetConstraintEx();
        } else {
          setConstraintEx((ConstraintViolationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      case INVALID_EX:
        return getInvalidEx();

      case UNIQUE_EX:
        return getUniqueEx();

      case NOT_FOUND_EX:
        return getNotFoundEx();

      case CONSTRAINT_EX:
        return getConstraintEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      case INVALID_EX:
        return isSetInvalidEx();
      case UNIQUE_EX:
        return isSetUniqueEx();
      case NOT_FOUND_EX:
        return isSetNotFoundEx();
      case CONSTRAINT_EX:
        return isSetConstraintEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof canScheduleMeeting_result)
        return this.equals((canScheduleMeeting_result)that);
      return false;
    }

    public boolean equals(canScheduleMeeting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      boolean this_present_invalidEx = true && this.isSetInvalidEx();
      boolean that_present_invalidEx = true && that.isSetInvalidEx();
      if (this_present_invalidEx || that_present_invalidEx) {
        if (!(this_present_invalidEx && that_present_invalidEx))
          return false;
        if (!this.invalidEx.equals(that.invalidEx))
          return false;
      }

      boolean this_present_uniqueEx = true && this.isSetUniqueEx();
      boolean that_present_uniqueEx = true && that.isSetUniqueEx();
      if (this_present_uniqueEx || that_present_uniqueEx) {
        if (!(this_present_uniqueEx && that_present_uniqueEx))
          return false;
        if (!this.uniqueEx.equals(that.uniqueEx))
          return false;
      }

      boolean this_present_notFoundEx = true && this.isSetNotFoundEx();
      boolean that_present_notFoundEx = true && that.isSetNotFoundEx();
      if (this_present_notFoundEx || that_present_notFoundEx) {
        if (!(this_present_notFoundEx && that_present_notFoundEx))
          return false;
        if (!this.notFoundEx.equals(that.notFoundEx))
          return false;
      }

      boolean this_present_constraintEx = true && this.isSetConstraintEx();
      boolean that_present_constraintEx = true && that.isSetConstraintEx();
      if (this_present_constraintEx || that_present_constraintEx) {
        if (!(this_present_constraintEx && that_present_constraintEx))
          return false;
        if (!this.constraintEx.equals(that.constraintEx))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      hashCode = hashCode * 8191 + ((isSetInvalidEx()) ? 131071 : 524287);
      if (isSetInvalidEx())
        hashCode = hashCode * 8191 + invalidEx.hashCode();

      hashCode = hashCode * 8191 + ((isSetUniqueEx()) ? 131071 : 524287);
      if (isSetUniqueEx())
        hashCode = hashCode * 8191 + uniqueEx.hashCode();

      hashCode = hashCode * 8191 + ((isSetNotFoundEx()) ? 131071 : 524287);
      if (isSetNotFoundEx())
        hashCode = hashCode * 8191 + notFoundEx.hashCode();

      hashCode = hashCode * 8191 + ((isSetConstraintEx()) ? 131071 : 524287);
      if (isSetConstraintEx())
        hashCode = hashCode * 8191 + constraintEx.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(canScheduleMeeting_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEx(), other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetInvalidEx(), other.isSetInvalidEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalidEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidEx, other.invalidEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUniqueEx(), other.isSetUniqueEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUniqueEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uniqueEx, other.uniqueEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNotFoundEx(), other.isSetNotFoundEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotFoundEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notFoundEx, other.notFoundEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetConstraintEx(), other.isSetConstraintEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstraintEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constraintEx, other.constraintEx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("canScheduleMeeting_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invalidEx:");
      if (this.invalidEx == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uniqueEx:");
      if (this.uniqueEx == null) {
        sb.append("null");
      } else {
        sb.append(this.uniqueEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notFoundEx:");
      if (this.notFoundEx == null) {
        sb.append("null");
      } else {
        sb.append(this.notFoundEx);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constraintEx:");
      if (this.constraintEx == null) {
        sb.append("null");
      } else {
        sb.append(this.constraintEx);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class canScheduleMeeting_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_resultStandardScheme getScheme() {
        return new canScheduleMeeting_resultStandardScheme();
      }
    }

    private static class canScheduleMeeting_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<canScheduleMeeting_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new MissingFieldException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INVALID_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalidEx = new InvalidFieldException();
                struct.invalidEx.read(iprot);
                struct.setInvalidExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNIQUE_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uniqueEx = new NonUniqueFieldException();
                struct.uniqueEx.read(iprot);
                struct.setUniqueExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NOT_FOUND_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.notFoundEx = new NotFoundException();
                struct.notFoundEx.read(iprot);
                struct.setNotFoundExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONSTRAINT_EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.constraintEx = new ConstraintViolationException();
                struct.constraintEx.read(iprot);
                struct.setConstraintExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invalidEx != null) {
          oprot.writeFieldBegin(INVALID_EX_FIELD_DESC);
          struct.invalidEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uniqueEx != null) {
          oprot.writeFieldBegin(UNIQUE_EX_FIELD_DESC);
          struct.uniqueEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.notFoundEx != null) {
          oprot.writeFieldBegin(NOT_FOUND_EX_FIELD_DESC);
          struct.notFoundEx.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.constraintEx != null) {
          oprot.writeFieldBegin(CONSTRAINT_EX_FIELD_DESC);
          struct.constraintEx.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class canScheduleMeeting_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public canScheduleMeeting_resultTupleScheme getScheme() {
        return new canScheduleMeeting_resultTupleScheme();
      }
    }

    private static class canScheduleMeeting_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<canScheduleMeeting_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        if (struct.isSetInvalidEx()) {
          optionals.set(2);
        }
        if (struct.isSetUniqueEx()) {
          optionals.set(3);
        }
        if (struct.isSetNotFoundEx()) {
          optionals.set(4);
        }
        if (struct.isSetConstraintEx()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
        if (struct.isSetInvalidEx()) {
          struct.invalidEx.write(oprot);
        }
        if (struct.isSetUniqueEx()) {
          struct.uniqueEx.write(oprot);
        }
        if (struct.isSetNotFoundEx()) {
          struct.notFoundEx.write(oprot);
        }
        if (struct.isSetConstraintEx()) {
          struct.constraintEx.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, canScheduleMeeting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new MissingFieldException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
        if (incoming.get(2)) {
          struct.invalidEx = new InvalidFieldException();
          struct.invalidEx.read(iprot);
          struct.setInvalidExIsSet(true);
        }
        if (incoming.get(3)) {
          struct.uniqueEx = new NonUniqueFieldException();
          struct.uniqueEx.read(iprot);
          struct.setUniqueExIsSet(true);
        }
        if (incoming.get(4)) {
          struct.notFoundEx = new NotFoundException();
          struct.notFoundEx.read(iprot);
          struct.setNotFoundExIsSet(true);
        }
        if (incoming.get(5)) {
          struct.constraintEx = new ConstraintViolationException();
          struct.constraintEx.read(iprot);
          struct.setConstraintExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
